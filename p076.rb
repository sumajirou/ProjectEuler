$memo = [[]]

limit = 100
def part(n,m)
  return 0 if n < m
  # puts "part(#{n},#{m})"
  $memo[n][m] ||= part(n-1,m-1) + part(n-m,m)
end

def print_memo()
  $memo[1..-1].each{|ary| p ary[1..-1]}
  puts
end

1.upto(limit) do |n|
  puts "n=#{n}"
  $memo[n] = []
  $memo[n][1] = 1
  $memo[n][n] = 1
  1.upto(n) do |m|
    part(n,m)
  end
  # print_memo()
end
print_memo()
print "n=#{limit} : "
puts $memo[limit][1..-1].sum -1
exit
#=> 190569291

#2->1
1+1
#3->1+1=2
2+1
1+1+1
#4->1+2+1=4
3+1
2+2
2+1+1
1+1+1+1
#5->1+4+1=6
4+1
3+2
3+1+1
2+2+1
2+1+1+1
1+1+1+1+1
#6->3+6+1=10
5+1
4+2
3+2+1
3+3
2+2+2
4+1+1
3+1+1+1
2+2+1+1
2+1+1+1+1
1+1+1+1+1+1
#7-> 3+10+1=14
5+2
4+3
3+2+2
6+1
5+1+1
4+2+1
4+1+1+1
3+3+1
3+2+1+1
3+1+1+1+1
2+2+2+1
2+2+1+1+1
2+1+1+1+1+1
1+1+1+1+1+1+1
#8-> 6+14+1=21
6+2
5+3
4+4
4+2+2
3+3+2
2+2+2+2
5+2+1
4+3+1
3+2+2+1
6+1+1
5+1+1+1
4+2+1+1
4+1+1+1+1
3+3+1+1
3+2+1+1+1
3+1+1+1+1+1
2+2+2+1+1
2+2+1+1+1+1
2+1+1+1+1+1+1
1+1+1+1+1+1+1+1
#9-> 7+21+1=29
8+1
7+2
7+1+1
6+3
5+4
5+2+2
4+3+2
3+3+3
3+2+2+2
6+2+1
5+3+1
4+4+1
4+2+2+1
3+3+2+1
2+2+2+2+1
5+2+1+1
4+3+1+1
3+2+2+1+1
6+1+1+1
5+1+1+1+1
4+2+1+1+1
4+1+1+1+1+1
3+3+1+1+1
3+2+1+1+1+1
3+1+1+1+1+1+1
2+2+2+1+1+1
2+2+1+1+1+1+1
2+1+1+1+1+1+1+1
1+1+1+1+1+1+1+1+1

[0,1,2,4,6,10,14,21,29]
[1,2,3,5,7,11,15,22,30]
[1,1,2,2,4,4,7,8]
[0,1,0,2,0,3,1]

# 一般項は無い！もう知らん！ゴリ押せえええええええええええ

# 分割数の漸化式を調べた
# p(10,3) = 8 は合計が10になる項数の数
8+1+1
7+2+1
6+3+1
6+2+2
5+4+1
5+3+2
4+4+2
4+3+3
# ここで、それぞれの数字から1をひいたものを考えてみます。
7+0+0
6+1+0
5+2+0
5+1+1
4+3+0
4+2+1
3+3+1
3+2+2
# 要するに
7
6+1
5+2
5+1+1
4+3
4+2+1
3+3+1
3+2+2
# p(10,3) = p(7,1) + p(7,2) + p(7,3)
# p(9,2) = p(7,1) + p(7,2)
# p(10,3) = p(9,2) + p(7,3)
# p(n,m)  = p(n-1,m-1) + p(n-m,m)
# が言える
# 初期条件とともにまとめると
# p(n) = p(n,1) + p(n,2) + ... + p(n,n)
# p(n,1) = 1
# p(n,n) = 1
# p(n,m)  = p(n-1,m-1) + p(n-m,m)
# メモ化して高速化する


2.upto(100) do |n|
    # puts "a(#{"%2d" % n}) : #{a.size + e}"
    # puts "a(#{"%2d" % n}) : #{a.size + e} => #{a}"
    puts "a(#{"%2d" % n}) : #{e}"
    # 3つに分ける。最後尾の2つの数字が異なるもの。最後尾の数字が2以上のもの。最後尾の数字が1のもの
    b,c = a.partition{|expr| expr !~ /(\d+)\+\1$/}
    c,d = c.partition{|expr| expr !~ /\+1$/}
    # p b,c,d
    # puts " "

    c = (b+c).map{|expr| expr+"+1"}
    b = b.map{|expr| expr.sub(/(\d+)$/){$1.to_i+1}}
    a = ["#{n}+1"] + b + c
    e = 1+e+b.size
    # p b,c,e,a
end
exit
a = ["1+1"]
e = 0
2.upto(100) do |n|
    # puts "a(#{"%2d" % n}) : #{a.size + e}"
    # puts "a(#{"%2d" % n}) : #{a.size + e} => #{a}"
    puts "a(#{"%2d" % n}) : #{a.size + e}"
    # 3つに分ける。最後尾の2つの数字が異なるもの。最後尾の数字が2以上のもの。最後尾の数字が1のもの
    b,c = a.partition{|expr| expr !~ /(\d+)\+\1$/}
    c,d = c.partition{|expr| expr !~ /\+1$/}
    # p b,c,d
    # puts " "

    c = (b+c).map{|expr| expr+"+1"}
    b = b.map{|expr| expr.sub(/(\d+)$/){$1.to_i+1}}
    e += d.size
    a = ["#{n}+1"] + b + c
    # p b,c,e,a
end