Problem 21 「友愛数」 †

d(n) を n の真の約数の和と定義する. (真の約数とは n 以外の約数のことである. )
 もし, d(a) = b かつ d(b) = a (a ≠ b のとき) を満たすとき, a と b は友愛数(親和数)であるという.

例えば, 220 の約数は 1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110 なので d(220) = 284 である.
 また, 284 の約数は 1, 2, 4, 71, 142 なので d(284) = 220 である.

それでは10000未満の友愛数の和を求めよ.

   NB. 完全数
   divisors=: ]((0=|~)#])>:@i."0 : [:
   properdivisors=: }:@divisors
   perfectnump=: =(+/@:properdivisors) : [:
   (perfectnump # [) >:i.10000
6 28 496 8128

NB. 友愛数
   (a#~a=b-~+/"1 divisors b=.a-~+/"1 divisors a=.>:i.10000) -.( a#~(2*a)=+/"1 divisors a=.>:i.10000)
   (((= +/@properdivisors^:2)-perfectnump) # [) >:i.9999
220 284 1184 1210 2620 2924 5020 5564 6232 6368
   +/(((= +/@properdivisors^:2)-perfectnump) # [) >:i.9999
31626

Problem 22 「名前のスコア」 †

5000個以上の名前が書かれている46Kのテキストファイル names.txt を用いる. まずアルファベット順にソートせよ.

のち, 各名前についてアルファベットに値を割り振り, リスト中の出現順の数と掛け合わせることで, 名前のスコアを計算する.

たとえば, リストがアルファベット順にソートされているとすると, COLINはリストの938番目にある. またCOLINは 3 + 15 + 12 + 9 + 14 = 53 という値を持つ. よってCOLINは 938 × 53 = 49714 というスコアを持つ.

ファイル中の全名前のスコアの合計を求めよ.

テキストファイルから文字列をそのまま読み込む
   a=. 1!:1 <'p022_names.txt'
"と,を空白に置換する。
   a=. ' '((I.@:(=&'"' +. =&',')@]) } ]) a
空白で区切り、文字のリストにして、ソート
   a=. /:~>;:a
スコアを求める関数
   score=.+/"1@:>:@((a.i.'A')-~(a.&i.)@-.&' ')"1
   score 'COLIN'
53
出現順の数と掛けあわせて総和
   +/(>:@i.@# * score) a
871198282

Problem 23 「非過剰数和」 †

完全数とは, その数の真の約数の和がそれ自身と一致する数のことである. たとえば, 28の真の約数の和は, 1 + 2 + 4 + 7 + 14 = 28 であるので, 28は完全数である.

真の約数の和がその数よりも少ないものを不足数といい, 真の約数の和がその数よりも大きいものを過剰数と呼ぶ.

12は, 1 + 2 + 3 + 4 + 6 = 16 となるので, 最小の過剰数である. よって2つの過剰数の和で書ける最少の数は24である. 数学的な解析により, 28123より大きい任意の整数は2つの過剰数の和で書けることが知られている. 2つの過剰数の和で表せない最大の数がこの上限よりも小さいことは分かっているのだが, この上限を減らすことが出来ていない.

2つの過剰数の和で書き表せない正の整数の総和を求めよ.

過剰数の一覧
   ((< +/@properdivisors) # [) >:i.100
12 18 20 24 30 36 40 42 48 54 56 60 66 70 72 78 80 84 88 90 96 100

aは28123までの過剰数
   a=.((< +/@properdivisors) # [) >:i.28123
2つの和の一覧から重複要素を削除し、結果を28123までの自然数から排除して、総和。
   +/(>:i.28123)-. ~.,+/~a
4179871

Problem 24 「辞書式順列」 †

順列とはモノの順番付きの並びのことである. たとえば, 3124は数 1, 2, 3, 4 の一つの順列である. すべての順列を数の大小でまたは辞書式に並べたものを辞書順と呼ぶ. 0と1と2の順列を辞書順に並べると
012 021 102 120 201 210

になる.

0,1,2,3,4,5,6,7,8,9からなる順列を辞書式に並べたときの100万番目はいくつか?
   999999 A.0 1 2 3 4 5 6 7 8 9
2 7 8 3 9 1 5 4 6 0
   ,":"0[999999 A.0 1 2 3 4 5 6 7 8 9
2783915460

Problem 25 「1000桁のフィボナッチ数」 †

フィボナッチ数列は以下の漸化式で定義される:
Fn = Fn-1 + Fn-2, ただし F1 = 1, F2 = 1.

最初の12項は以下である.
F1 = 1
F2 = 1
F3 = 2
F4 = 3
F5 = 5
F6 = 8
F7 = 13
F8 = 21
F9 = 34
F10 = 55
F11 = 89
F12 = 144

12番目の項, F12が3桁になる最初の項である.

1000桁になる最初の項の番号を答えよ.

      fib=: 3 : 0
   ((((1+%:5)%2)^y)-(((1-%:5)%2)^y))%%:5
   )
   fib >:i.5
1 1 2 3 5

   {.((1000&<:)@>:@<.@(10&^.) # [)fib >:i.100000
_
今まで自然対数を利用して桁数を求めていたが、そんな必要ないじゃないか
1e999で1000桁の最初の数ができる。なんということ。
   {.((1e999&<:) # [)fib >:i.100000
_
一般項を使ったfibだと大きい数で使えない。
地道に2項足していく関数を使う
http://kquoe2.hatenablog.com/entry/20010207/p1

   fib=:,+/@(_2&{.)
   fib 2 3
2 3 5
   Fib=. 3 : 'fib^:(y-2)(1x 1x)'
   Fib 5
1 1 2 3 5
   {.((10^999x)&<:@Fib # >:@i.) 5000
4782

Problem 26 「逆数の循環節 その1」 †

単位分数とは分子が1の分数である. 分母が2から10の単位分数を10進数で表記すると次のようになる.

1/2 = 0.5
1/3 = 0.(3)
1/4 = 0.25
1/5 = 0.2
1/6 = 0.1(6)
1/7 = 0.(142857)
1/8 = 0.125
1/9 = 0.(1)
1/10 = 0.1

0.1(6)は 0.166666... という数字であり, 1桁の循環節を持つ. 1/7 の循環節は6桁ある.

d < 1000 なる 1/d の中で小数部の循環節が最も長くなるような d を求めよ.

この問題を解く少し前にたまたま読んでいた「素数夜曲 女王陛下のLisp」に、
循環小数の節の長さに関する定理があった。
「分子を1、分母をnとする分数において、(n,2*5)=1 (互いに素)で
あるならば、分数1/nは無限循環小数(十進数表記)となり、循環節
の長さは、nに関する10の位数sと一致する。」
つまり10の位数を求めれば良い、
まず与えられた整数の位数を求める関数を作る。

    ({.@((1&=)@([|10x&^@])#])>:@i.)"0[>:i.17
0 0 1 0 0 0 6 0 1 0 2 0 6 0 0 0 16

nが2と5を約数に含む場合この定理が使えない。
このnの循環小数の節の長さを求めるには、2と5を除してから行えばいいが、
今回の場合、小さい数字から順に求めて最大値を得るが、nは最大値を更新しないので無視する。

2と5を約数に含む数字を除外。1も分数にならないので除外。
   a=.}.((5*>:@i.@>.@%&5)-.~(2*>:@i.@>.@%&2) -.~ >:@i.) 20
   a=.(0&~:@(2&|*5&|) # [) }.>:i.1000
   NB. それぞれの節の長さを求める。
   b=.({.@( (1&=)@([ | 10x&^@] ) # ]) >:@i.)"0 a
   bの最大値のインデックスでaの数字を求める。
   (b i.>./b){a
983

Problem 27 「二次式素数」 †

オイラーは以下の二次式を考案している:
n^2 + n + 41.

この式は, n を0から39までの連続する整数としたときに40個の素数を生成する. しかし, n = 40 のとき 40^2 + 40 + 41 = 40(40 + 1) + 41 となり41で割り切れる. また, n = 41 のときは 41^2 + 41 + 41 であり明らかに41で割り切れる.

計算機を用いて, 二次式 n^2 - 79n + 1601 という式が発見できた. これは n = 0 から 79 の連続する整数で80個の素数を生成する. 係数の積は, -79 × 1601 で -126479である.

さて, |a| < 1000, |b| < 1000 として以下の二次式を考える (ここで |a| は絶対値): 例えば |11| = 11 |-4| = 4である.
n^2 + an + b

n = 0 から始めて連続する整数で素数を生成したときに最長の長さとなる上の二次式の, 係数 a, b の積を答えよ.

   {.(( 0 p: 41 1 1&p.) # ])i.100
40
   i:5
_5 _4 _3 _2 _1 0 1 2 3 4 5
   (2 rperm i:1),.1
_1 _1 1
_1  0 1
_1  1 1
 0 _1 1
 0  0 1
 0  1 1
 1 _1 1
 1  0 1
 1  1 1
 多項式(x p. y)のxができた。
 まてまて総当りで挑むとえらいことになるぞ。
 なにかアルゴリズムがあるはずだ。
 保留する。

n=0のときを考えると
  n^2 + an + b
= b
これが、素数である必要があるのでbは2から1000までの素数に限られる。
b=2の時を考える。
n=0のとき2
n=1のときa+3
n=2のとき2a+6
この時点で素数ではない。長さは最大でも2。
b=2は除外して良い。結局bは1000までの奇素数となる。
   b =.}.(1&p:#]) i.1000
   ({. , {:)b
3 997
   #b
167

n=1のとき、
1+a+bが素数。
1+bは偶数になるので、長さが1を超えるためには、aは奇数である必要がある。
   a=.(1&=@(2&|) # ])i:1000
   ({. , {:)a
_999 999
   #a
1000

aとbができたので、多項式の左引数を作成する。
   ({. ,: {:)c=.(;"0,{b;a),.1
  3 _999 1
997  999 1
   #c
167000

n=bの時
b^2+ab+b=b*(b+a+1)となり、必ず合成数となる。よってnは0からbまで調べれば十分だ。

i.は二項動詞として使うと、xの中でyが初めて出てくるindexを返す。0が出てくるまでの要素数は
   1 1 1 1 0 0 0 i. 0
4
これが使える。

   (] (i.&0)@(1&p:)@p. i.@{.)"1 c




Problem 28 「螺旋状に並んだ数の対角線」 †

1から初めて右方向に進み時計回りに数字を増やしていき, 5×5の螺旋が以下のように生成される:
21 22 23 24 25
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13


両対角線上の数字の合計は101であることが確かめられる.

1001×1001の螺旋を同じ方法で生成したとき, 対角線上の数字の和はいくつか?

5x5の螺旋では対角線の合計は
1 + 6*4 + 19*4 = 101
で求まる。
6や19をどう求めるかというと、螺旋の右上の数字に注目する。
1,9,25と規則性がある。
螺旋が1回大きくなると右上から左に移動するまでに左に2つ下に1つで計3つ増える。よって
6  = 3^2-3
19 = 5^2-6
40 = 7^2-9
(2n+1)^2-3n
=4n^2+n+1
多項式はp.を用いる
   1 1 4 p. 1
6
   1 1 4 p. 2
19
1001x1001を求める。n=500なので
   x:1++/4*1 1 4 p. >:i.500
669171001

Problem 29 「個別のべき乗」 †

2 ≤ a ≤ 5 と 2 ≤ b ≤ 5について, ab を全て考えてみよう:
2^2=4,  2^3=8,   2^4=16,  2^5=32
3^2=9,  3^3=27,  3^4=81,  3^5=243
4^2=16, 4^3=64,  4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

これらを小さい順に並べ, 同じ数を除いたとすると, 15個の項を得る:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

2 ≤ a ≤ 100, 2 ≤ b ≤ 100 で同じことをしたときいくつの異なる項が存在するか?
  #~.;^/~2+i.99
9183


Problem 30 「各桁の5乗」 †

驚くべきことに, 各桁を4乗した数の和が元の数と一致する数は3つしかない.
1634 = 1^4 + 6^4 + 3^4 + 4^4
8208 = 8^4 + 2^4 + 0^4 + 8^4
9474 = 9^4 + 4^4 + 7^4 + 4^4

ただし, 1=1^4は含まないものとする. この数たちの和は 1634 + 8208 + 9474 = 19316 である.

各桁を5乗した数の和が元の数と一致するような数の総和を求めよ.
n進化を使って各桁を取り出す
4桁の場合
   a #~ a&= +/"1^&4 (10$10) #:a=.2+i.1000000
1634 8208 9474
5桁の場合
   a #~ a&= +/"1^&5 (10$10) #:a=.2+i.1000000
4150 4151 54748 92727 93084 194979
   +/a #~ a&= +/"1^&5 (10$10) #:a=.2+i.1000000
443839

文字化を使って各桁を取り出す。
4桁の場合
   ((=+/"1@(^&4@"."0@":)"0) # [)2+i.10000
1634 8208 9474
5桁の場合
   ((=+/"1@(^&5@"."0@":)"0) # [)2+i.1000000
4150 4151 54748 92727 93084 194979


