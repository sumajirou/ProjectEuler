Problem 31 「硬貨の和」 †

イギリスでは硬貨はポンド£とペンスpがあり，一般的に流通している硬貨は以下の8種類である.

1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).

以下の方法で£2を作ることが可能である．

1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p

これらの硬貨を使って£2を作る方法は何通りあるか?

   硬貨の種類
   a=.1 2 5 10 20 50 100 200
   200ペンスをつくるときそれぞれの硬貨の最大数
   b=.200%a
   b
200 100 40 20 10 4 2 1

カタログ
   >,{i.L:0 <"0 >: b
   本番
+/200=+/"1 a&*"1 >,{i.L:0 <"0 >: b
Problem 32 「パンデジタル積」 †

すべての桁に 1 から n が一度だけ使われている数をn桁の数がパンデジタル (pandigital) であるということにしよう: 例えば5桁の数 15234 は1から5のパンデジタルである.

7254 は面白い性質を持っている. 39 × 186 = 7254 と書け, 掛けられる数, 掛ける数, 積が1から9のパンデジタルとなる.

掛けられる数/掛ける数/積が1から9のパンデジタルとなるような積の総和を求めよ.

HINT: いくつかの積は, 1通り以上の掛けられる数/掛ける数/積の組み合わせを持つが1回だけ数え上げよ.
9桁のパンデジタルを3つの数字に分ける事を考える。
Cut(;.1)を利用するためにインデックスを作成。
ind=.1,. perm 1 1 0 0 0 0 0 0
例えば1 0 0 1 0 0 0 1 0 なら上から3桁、4桁、2桁と言ったかんじに分けられる。

3 9 1 8 6 7 2 5 4を3つの数字に分ける。#indが28なので28通り。
   ind (10#.);.(1) 3 9 1 8 6 7 2 5 4
   (ind&((10&#.);.1))("1) 3 9 1 8 6 7 2 5 4,:1 2 3 4 5 6 7 8 9
   nums=.perm>:i.9

$ !9 28 3を$ !9*28 3 の二次元に整形して3つの数字を降順にして重複する行を削除
   pandigitals=.  ~.\:~"1>,<("1) (ind&((10&#.);.1))("1) nums
   a b cの行においてa=b*cが成り立つ行を抜粋
   x=.((0&{ = (1&{ * 2&{))("1) # ])pandigitals
   x
5796  483 12
5796  138 42
4396  157 28
7632  159 48
6952 1738  4
5346  297 18
7254  186 39
7852 1963  4
5346  198 27
積
   x:+/~.{."1 x
45228

長かった……4時間はかかってる。もっとかも。






Problem 33 「桁消去分数」 †

49/98は面白い分数である.「分子と分母からそれぞれ9を取り除くと, 49/98 = 4/8 となり, 簡単な形にすることができる」と経験の浅い数学者が誤って思い込んでしまうかもしれないからである. (方法は正しくないが，49/98の場合にはたまたま正しい約分になってしまう．)

我々は 30/50 = 3/5 のようなタイプは自明な例だとする.

このような分数のうち, 1より小さく分子・分母がともに2桁の数になるような自明でないものは, 4個ある.

その4個の分数の積が約分された形で与えられたとき, 分母の値を答えよ.

1 =< a,b,c =< 9 の時、(10a+b)/(10b+c) = a/cとなる3つの整数の組を見つける。
a b cを受け取り(10a+b)/(10b+c)を返す関数
   (10&#.@(2&{.) x:@% 10&#.@(_2&{.))4 9 8
1r2
a b cを受け取りa/cを返す関数
   ({. x:@% {:)4 9 8
1r2

重複してない行だけ取り出す
    ((# = #@~.)"1 # ]) a
   c=.(((10&#.@(2&{.) x:@% 10&#.@(_2&{.)) = ({. x:@% {:))"1 # ]) ((# = #@~.)"1 # ]) 3 rperm >:i.9
   c
1 6 4
1 9 5
2 6 5
4 9 8
   ({. x:@% {:)"1  c
1r4 1r5 2r5 1r2
   */({. x:@% {:)"1  c
1r100

Problem 34 「桁の階乗」 †

145は面白い数である. 1! + 4! + 5! = 1 + 24 + 120 = 145となる.

各桁の数の階乗の和が自分自身と一致するような数の和を求めよ.

注: 1! = 1 と 2! = 2 は総和に含めてはならない.

   ((=+/"1@(!@"."0@":)"0) # [)3+i.100000
145 40585
   +/((=+/"1@(!@"."0@":)"0) # [)3+i.100000
40730
数字を各桁のリストにする関数を作るべきだな。


Problem 35 「巡回素数」 †

197は巡回素数と呼ばれる. 桁を回転させたときに得られる数 197, 971, 719 が全て素数だからである.

100未満には巡回素数が13個ある: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, および97である.

100万未満の巡回素数はいくつあるか?

100万未満の素数のリスト
   a=.(<&1e6 # ])p:i.1e6
0を含む数字は巡回数を構成できない。
   a=. (-.@('0'&e.)@":"0 # [) a
偶数を含む数字は巡回素数になり得ない。ただし2を除く。
   a=. 2,(-.@('2'&e.)@":"0 # [) a
   a=. (-.@('4'&e.)@":"0 # [) a
   a=. (-.@('6'&e.)@":"0 # [) a
   a=. (-.@('8'&e.)@":"0 # [) a
5を含む数字は巡回素数になり得ない。ただし5を除く。
   a=. 5,(-.@('5'&e.)@":"0 # [) a
   a=./:~a
   $a
1113
100万から1113まで候補が絞れた。

0を含まない数字を受け取って巡回数のリストにする関数
   rotate=. "."1@(}. , {.)@":"0
   rotatenums=. #@": (rotate^:(i.@[) ]) ]
   rotate 123
231
   rotatenums 123
123 231 312
   本番
   #(*/@:(1&p:)@rotatenums"0 # ])a
55

Problem 36 「二種類の基数による回文数」 †

585 = 10010010012 (2進) は10進でも2進でも回文数である.

100万未満で10進でも2進でも回文数になるような数の総和を求めよ.

(注: 先頭に0を含めて回文にすることは許されない.)

   (((-: |.)@,@(":"0@#:))"0 # [) (((-: |.)@":)"0 # [) i.1e6
0 1 3 5 7 9 33 99 313 585 717 7447 9009 15351 32223 39993 53235 53835 73737 585585
   +/(((-: |.)@,@(":"0@#:))"0 # [) (((-: |.)@":)"0 # [) i.1e6
872187

Problem 37 「切り詰め可能素数」 †

3797は面白い性質を持っている. まずそれ自身が素数であり, 左から右に桁を除いたときに全て素数になっている (3797, 797, 97, 7). 同様に右から左に桁を除いたときも全て素数である (3797, 379, 37, 3).

右から切り詰めても左から切り詰めても素数になるような素数は11個しかない. 総和を求めよ.

注: 2, 3, 5, 7を切り詰め可能な素数とは考えない.

100万未満の素数のリスト(2, 3, 5, 7を除く)
   a=.(<&1e6 # ])p:i.1e6
   a=.4}.a
NB. 0を含む数字は切り詰め可能素数を構成できない。
   a=. (-.@('0'&e.)@":"0 # [) a
NB. 偶数を含む数字は切り詰め可能素数になり得ない。ただし切り詰めた結果2になる場合もあるので2は除外
   a=. (-.@('4'&e.)@":"0 # [) a
   a=. (-.@('6'&e.)@":"0 # [) a
   a=. (-.@('8'&e.)@":"0 # [) a
   $a
7552
100万から7552まで候補が絞れた。

0を含まない数字を受け取って切り詰めてリストにする関数
   (".\. , ".\)@":("0) 3797
3797 797 97 7 3 37 379 3797
切り詰め可能素数？
   */@:(1&p:)@(".\. , ".\)@":("0) 3797
1
   */@:(1&p:)@(".\. , ".\)@":("0) 3798
0

本番
   (*/@:(1&p:)@(".\. , ".\)@":("0) # [) a
23 37 53 73 313 317 373 797 3137 3797 739397
   #(*/@:(1&p:)@(".\. , ".\)@":("0) # [) a
11
   +/(*/@:(1&p:)@(".\. , ".\)@":("0) # [) a
748317

11個で有限だ。これは予想だが、7桁の素数に切り詰め可能素数が無いからじゃないかな。

Problem 38 「パンデジタル倍数」 †

192 に 1, 2, 3 を掛けてみよう.

 192 × 1 = 192
 192 × 2 = 384
 192 × 3 = 576

積を連結することで1から9の パンデジタル数 192384576 が得られる. 192384576 を 192 と (1,2,3) の連結積と呼ぶ.

同じようにして, 9 を 1,2,3,4,5 と掛け連結することでパンデジタル数 918273645 が得られる. これは 9 と (1,2,3,4,5) との連結積である.

整数と (1,2,...,n) (n > 1) との連結積として得られる9桁のパンデジタル数の中で最大のものはいくつか?

nは2から9。整数は2倍して4桁になるものが最大か。
1から9999をそれぞれ1から9倍して、連結した文字が途中で9桁になったもののリスト。
   a=.(9&=@#@":"0 # ])x:".' '-.~"1":(>:i.9999) */>:i.9
   a=.a,(9&=@#@":"0 # ])x:".' '-.~"1":(>:i.9999) */>:i.8
   a=.a,(9&=@#@":"0 # ])x:".' '-.~"1":(>:i.9999) */>:i.7
   a=.a,(9&=@#@":"0 # ])x:".' '-.~"1":(>:i.9999) */>:i.6
   a=.a,(9&=@#@":"0 # ])x:".' '-.~"1":(>:i.9999) */>:i.5
   a=.a,(9&=@#@":"0 # ])x:".' '-.~"1":(>:i.9999) */>:i.4
   a=.a,(9&=@#@":"0 # ])x:".' '-.~"1":(>:i.9999) */>:i.3
   a=.a,(9&=@#@":"0 # ])x:".' '-.~"1":(>:i.9999) */>:i.2
   a
123456789 369121518 510152025 612182430 714212835 816243240 918273645 255075100
265278104 275481108 285684112 295887116 306090120 316293124 326496128 336699132
100200300 101202303 102204306 103206309 104208312 105210315 106212318 107214321
108216324 109218...
   #a
5250
パンデジタル数かどうか調べ、最大のものを出力
調べ方は、0を含まないかつすべての桁が異なる数字
   (((9 = #@~.@":"0) *. -.@('0'&e.)@":"0) # ]) a
123456789 918273645 192384576 219438657 273546819 327654981 672913458 679213584
692713854 726914538 729314586 732914658 769215384 792315846 793215864 926718534
927318546 932718654
   >./(((9 = #@~.@":"0) *. -.@('0'&e.)@":"0) # ]) a
932718654






Problem 39 「整数の直角三角形」 †

辺の長さが {a,b,c} と整数の3つ組である直角三角形を考え, その周囲の長さを p とする. p = 120のときには3つの解が存在する:

{20,48,52}, {24,45,51}, {30,40,50}

p ≤ 1000 のとき解の数が最大になる p はいくつか?

ピタゴラス数の数が最大になるpということか

aとbのリスト昇順
   a=.;<@(,. >:@i.)("0) >:i.1000
ピタゴラス数aとbのリスト
   p=.(0=1|%:+/"1*:a) # a
ピタゴラス数c b aのリスト
   p=.(%:+/"1*:p),.p
   インデックスを作成
   ind=.~:/:~+/"1 p
   ピタゴラス数を周の長さとその個数に変形し、周長1000以下を除外し、
   個数で昇順に並び替え、最後の要素が答え
{:/:~(1000&>:@{:"1 # ])>(# , {.@])L:0 ind <;.1 /:~+/"1 p
8 840

Problem 40 「チャンパーノウン定数」 †

正の整数を順に連結して得られる以下の10進の無理数を考える:
0.123456789101112131415161718192021...

小数第12位は1である.

dnで小数第n位の数を表す. d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000 を求めよ.

チャンパーノウン定数を作成。文字列操作なら簡単に作れる。
   a=.'0',;":L:0<"0>:i.1000000
   a
0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121...
   "."0[ 1 10 100 1000 10000 100000 1000000{a
1 1 5 3 7 2 1
   */".("0) 1 10 100 1000 10000 100000 1000000{a
210

